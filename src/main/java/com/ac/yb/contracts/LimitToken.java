package com.ac.yb.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class LimitToken extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506040516200188b3803806200188b8339810160408190526200003491620002bb565b600060208181527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c58054600160ff1991821681179092556380ac58cd60e01b9093527ff7815fccbf112960a73756e185887fedcb9fc64ca0a16cc5923b7960ed78080080549093168117909255845185928592620000b692908501906200013b565b508051620000cc9060029060208401906200013b565b505050600081116040518060400160405280600681526020016503030333031360d41b815250906200011c5760405162461bcd60e51b81526004016200011391906200032e565b60405180910390fd5b50600980546001600160a01b03191633179055600a5550620003a09050565b828054620001499062000363565b90600052602060002090601f0160209004810192826200016d5760008555620001b8565b82601f106200018857805160ff1916838001178555620001b8565b82800160010185558215620001b8579182015b82811115620001b85782518255916020019190600101906200019b565b50620001c6929150620001ca565b5090565b5b80821115620001c65760008155600101620001cb565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000214578181015183820152602001620001fa565b8381111562000224576000848401525b50505050565b600082601f8301126200023c57600080fd5b81516001600160401b0380821115620002595762000259620001e1565b604051601f8301601f19908116603f01168101908282118183101715620002845762000284620001e1565b816040528381528660208588010111156200029e57600080fd5b620002b1846020830160208901620001f7565b9695505050505050565b600080600060608486031215620002d157600080fd5b83516001600160401b0380821115620002e957600080fd5b620002f7878388016200022a565b945060208601519150808211156200030e57600080fd5b506200031d868287016200022a565b925050604084015190509250925092565b60208152600082518060208401526200034f816040850160208701620001f7565b601f01601f19169190910160400192915050565b600181811c908216806200037857607f821691505b602082108114156200039a57634e487b7160e01b600052602260045260246000fd5b50919050565b6114db80620003b06000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342842e0e11610097578063a4d66daf11610066578063a4d66daf1461021d578063b88d4fde14610225578063d0def52114610238578063e985e9c51461024b57600080fd5b806342842e0e146101c35780636352211e146101d657806370a08231146101e9578063a22cb4651461020a57600080fd5b8063095ea7b3116100d3578063095ea7b31461018b57806315070401146101a057806317d7de7c146101a857806323b872dd146101b057600080fd5b806301cd104f146100fa57806301ffc9a714610123578063081812fc14610160575b600080fd5b61010d6101083660046110a3565b610287565b60405161011a9190611109565b60405180910390f35b610150610131366004611135565b6001600160e01b03191660009081526020819052604090205460ff1690565b604051901515815260200161011a565b61017361016e3660046110a3565b61038d565b6040516001600160a01b03909116815260200161011a565b61019e61019936600461116e565b610406565b005b61010d6105a8565b61010d61063a565b61019e6101be366004611198565b610649565b61019e6101d1366004611198565b610804565b6101736101e43660046110a3565b610824565b6101fc6101f73660046111d4565b61087c565b60405190815260200161011a565b61019e6102183660046111ef565b6108e0565b600a546101fc565b61019e61023336600461122b565b61094c565b6101fc6102463660046112dc565b610995565b61015061025936600461139e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b600081815260036020908152604091829020548251808401909352600683526518181998181960d11b918301919091526060916001600160a01b0390911690816102ed5760405162461bcd60e51b81526004016102e49190611109565b60405180910390fd5b5060008381526008602052604090208054610307906113d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610333906113d1565b80156103805780601f1061035557610100808354040283529160200191610380565b820191906000526020600020905b81548152906001019060200180831161036357829003601f168201915b5050505050915050919050565b6000818152600360209081526040808320548151808301909252600682526518181998181960d11b9282019290925283916001600160a01b03166103e45760405162461bcd60e51b81526004016102e49190611109565b506000838152600460205260409020546001600160a01b031691505b50919050565b60008181526003602052604090205481906001600160a01b03163381148061045157506001600160a01b038116600090815260066020908152604080832033845290915290205460ff165b6040518060400160405280600681526020016530303330303360d01b8152509061048e5760405162461bcd60e51b81526004016102e49190611109565b50600083815260036020908152604091829020548251808401909352600683526518181998181960d11b918301919091528491906001600160a01b03166104e85760405162461bcd60e51b81526004016102e49190611109565b50600084815260036020908152604091829020548251808401909352600683526506060666060760d31b918301919091526001600160a01b03908116919087168214156105485760405162461bcd60e51b81526004016102e49190611109565b5060008581526004602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b6060600280546105b7906113d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105e3906113d1565b80156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b5050505050905090565b6060600180546105b7906113d1565b60008181526003602052604090205481906001600160a01b03163381148061068757506000828152600460205260409020546001600160a01b031633145b806106b557506001600160a01b038116600090815260066020908152604080832033845290915290205460ff165b604051806040016040528060068152602001650c0c0ccc0c0d60d21b815250906106f25760405162461bcd60e51b81526004016102e49190611109565b50600083815260036020908152604091829020548251808401909352600683526518181998181960d11b918301919091528491906001600160a01b031661074c5760405162461bcd60e51b81526004016102e49190611109565b50600084815260036020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b039081169190881682146107ab5760405162461bcd60e51b81526004016102e49190611109565b5060408051808201909152600681526530303330303160d01b60208201526001600160a01b0387166107f05760405162461bcd60e51b81526004016102e49190611109565b506107fb8686610a70565b50505050505050565b61081f83838360405180602001604052806000815250610afb565b505050565b600081815260036020908152604091829020548251808401909352600683526518181998181960d11b918301919091526001600160a01b031690816104005760405162461bcd60e51b81526004016102e49190611109565b60408051808201909152600681526530303330303160d01b60208201526000906001600160a01b0383166108c35760405162461bcd60e51b81526004016102e49190611109565b50506001600160a01b031660009081526005602052604090205490565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61098e85858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610afb92505050565b5050505050565b60095460408051808201909152600681526530303330303360d01b60208201526000916001600160a01b031633146109e05760405162461bcd60e51b81526004016102e49190611109565b5060006109ec60075490565b905080600a54116040518060400160405280600681526020016530303330303960d01b81525090610a305760405162461bcd60e51b81526004016102e49190611109565b50610a3b8482610d9a565b60008181526008602090815260409091208451610a5a9286019061100a565b50610a69600780546001019055565b9392505050565b600081815260036020908152604080832054600490925290912080546001600160a01b03191690556001600160a01b0316610aab8183610e7d565b610ab58383610f26565b81836001600160a01b0316826001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60008281526003602052604090205482906001600160a01b031633811480610b3957506000828152600460205260409020546001600160a01b031633145b80610b6757506001600160a01b038116600090815260066020908152604080832033845290915290205460ff165b604051806040016040528060068152602001650c0c0ccc0c0d60d21b81525090610ba45760405162461bcd60e51b81526004016102e49190611109565b50600084815260036020908152604091829020548251808401909352600683526518181998181960d11b918301919091528591906001600160a01b0316610bfe5760405162461bcd60e51b81526004016102e49190611109565b50600085815260036020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b03908116919089168214610c5d5760405162461bcd60e51b81","526004016102e49190611109565b5060408051808201909152600681526530303330303160d01b60208201526001600160a01b038816610ca25760405162461bcd60e51b81526004016102e49190611109565b50610cad8787610a70565b610cbf876001600160a01b0316610fce565b15610d9057604051630a85bd0160e11b81526000906001600160a01b0389169063150b7a0290610cf99033908d908c908c90600401611406565b6020604051808303816000875af1158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c9190611443565b60408051808201909152600681526530303330303560d01b60208201529091506001600160e01b03198216630a85bd0160e11b14610d8d5760405162461bcd60e51b81526004016102e49190611109565b50505b5050505050505050565b60408051808201909152600681526530303330303160d01b60208201526001600160a01b038316610dde5760405162461bcd60e51b81526004016102e49190611109565b50600081815260036020908152604091829020548251808401909352600683526518181998181b60d11b918301919091526001600160a01b031615610e365760405162461bcd60e51b81526004016102e49190611109565b50610e418282610f26565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815260036020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b03848116911614610ed85760405162461bcd60e51b81526004016102e49190611109565b506001600160a01b0382166000908152600560205260408120805460019290610f02908490611476565b9091555050600090815260036020526040902080546001600160a01b031916905550565b600081815260036020908152604091829020548251808401909352600683526518181998181b60d11b918301919091526001600160a01b031615610f7d5760405162461bcd60e51b81526004016102e49190611109565b50600081815260036020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260059091528120805460019290610fc590849061148d565b90915550505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906110025750808214155b949350505050565b828054611016906113d1565b90600052602060002090601f016020900481019282611038576000855561107e565b82601f1061105157805160ff191683800117855561107e565b8280016001018555821561107e579182015b8281111561107e578251825591602001919060010190611063565b5061108a92915061108e565b5090565b5b8082111561108a576000815560010161108f565b6000602082840312156110b557600080fd5b5035919050565b6000815180845260005b818110156110e2576020818501810151868301820152016110c6565b818111156110f4576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610a6960208301846110bc565b6001600160e01b03198116811461113257600080fd5b50565b60006020828403121561114757600080fd5b8135610a698161111c565b80356001600160a01b038116811461116957600080fd5b919050565b6000806040838503121561118157600080fd5b61118a83611152565b946020939093013593505050565b6000806000606084860312156111ad57600080fd5b6111b684611152565b92506111c460208501611152565b9150604084013590509250925092565b6000602082840312156111e657600080fd5b610a6982611152565b6000806040838503121561120257600080fd5b61120b83611152565b91506020830135801515811461122057600080fd5b809150509250929050565b60008060008060006080868803121561124357600080fd5b61124c86611152565b945061125a60208701611152565b935060408601359250606086013567ffffffffffffffff8082111561127e57600080fd5b818801915088601f83011261129257600080fd5b8135818111156112a157600080fd5b8960208285010111156112b357600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156112ef57600080fd5b6112f883611152565b9150602083013567ffffffffffffffff8082111561131557600080fd5b818501915085601f83011261132957600080fd5b81358181111561133b5761133b6112c6565b604051601f8201601f19908116603f01168101908382118183101715611363576113636112c6565b8160405282815288602084870101111561137c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156113b157600080fd5b6113ba83611152565b91506113c860208401611152565b90509250929050565b600181811c908216806113e557607f821691505b6020821081141561040057634e487b7160e01b600052602260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611439908301846110bc565b9695505050505050565b60006020828403121561145557600080fd5b8151610a698161111c565b634e487b7160e01b600052601160045260246000fd5b60008282101561148857611488611460565b500390565b600082198211156114a0576114a0611460565b50019056fea2646970667358221220947ba4496269165913f575b6d067c07e117330673bac931ca3d86034b678e49864736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","516309281b4360e01b81526000906001600160a01b038916906309281b4390610c819033908d908c908c9060040161141e565b6020604051808303816000875af1158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc4919061145b565b60408051808201909152600681526530303330303560d01b60208201529091506001600160e01b03198216630a85bd0160e11b14610d1657604051636381e58960e11b81526004016103a29190611108565b50505b5050505050505050565b60408051808201909152600681526530303330303160d01b60208201526001600160a01b038316610d6857604051636381e58960e11b81526004016103a29190611108565b50600081815260036020908152604091829020548251808401909352600683526518181998181b60d11b918301919091526001600160a01b031615610dc157604051636381e58960e11b81526004016103a29190611108565b50610dcc8282610ecf565b60405181906001600160a01b038416906000907f18f84334255a242551aa98c68047b5da8063eab9fbeaec1eddeea280044b9ff1908290a45050565b600081815260036020908152604080832054600490925290912080546001600160a01b03191690556001600160a01b0316610e438183610f78565b610e4d8383610ecf565b81836001600160a01b0316826001600160a01b03167f18f84334255a242551aa98c68047b5da8063eab9fbeaec1eddeea280044b9ff160405160405180910390a4505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708115801590610ec75750808214155b949350505050565b600081815260036020908152604091829020548251808401909352600683526518181998181b60d11b918301919091526001600160a01b031615610f2757604051636381e58960e11b81526004016103a29190611108565b50600081815260036020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260059091528120805460019290610f6f90849061148e565b90915550505050565b600081815260036020908152604091829020548251808401909352600683526530303330303760d01b918301919091526001600160a01b03848116911614610fd457604051636381e58960e11b81526004016103a29190611108565b506001600160a01b0382166000908152600560205260408120805460019290610ffe9084906114a6565b9091555050600090815260036020526040902080546001600160a01b031916905550565b82805461102e906113e9565b90600052602060002090601f0160209004810192826110505760008555611096565b82601f1061106957805160ff1916838001178555611096565b82800160010185558215611096579182015b8281111561109657825182559160200191906001019061107b565b506110a29291506110a6565b5090565b5b808211156110a257600081556001016110a7565b6000815180845260005b818110156110e1576020818501810151868301820152016110c5565b818111156110f3576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006106b160208301846110bb565b80356001600160a01b038116811461113257600080fd5b919050565b6000806040838503121561114a57600080fd5b6111538361111b565b946020939093013593505050565b6000806040838503121561117457600080fd5b61117d8361111b565b91506020830135801515811461119257600080fd5b809150509250929050565b600080604083850312156111b057600080fd5b6111b98361111b565b91506111c76020840161111b565b90509250929050565b6000806000806000608086880312156111e857600080fd5b6111f18661111b565b94506111ff6020870161111b565b935060408601359250606086013567ffffffffffffffff8082111561122357600080fd5b818801915088601f83011261123757600080fd5b81358181111561124657600080fd5b89602082850101111561125857600080fd5b9699959850939650602001949392505050565b60006020828403121561127d57600080fd5b5035919050565b63b95aa35560e01b600052604160045260246000fd5b600080604083850312156112ad57600080fd5b6112b68361111b565b9150602083013567ffffffffffffffff808211156112d357600080fd5b818501915085601f8301126112e757600080fd5b8135818111156112f9576112f9611284565b604051601f8201601f19908116603f0116810190838211818310171561132157611321611284565b8160405282815288602084870101111561133a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561137157600080fd5b61137a8461111b565b92506113886020850161111b565b9150604084013590509250925092565b6000602082840312156113aa57600080fd5b6106b18261111b565b6001600160e01b0319811681146113c957600080fd5b50565b6000602082840312156113de57600080fd5b81356106b1816113b3565b600181811c908216806113fd57607f821691505b602082108114156105d55763b95aa35560e01b600052602260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611451908301846110bb565b9695505050505050565b60006020828403121561146d57600080fd5b81516106b1816113b3565b63b95aa35560e01b600052601160045260246000fd5b600082198211156114a1576114a1611478565b500190565b6000828210156114b8576114b8611478565b50039056fea26469706673582212207b67a6de3efcf820231fcd8437f3b5cd6f35d843762af7dc9a18fd6cc348b09264736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETNAME = "getName";

    public static final String FUNC_GETSYMBOL = "getSymbol";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LIMIT = "limit";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKENURL = "tokenUrl";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected LimitToken(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalForAllEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalForAllEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt approve(String _approved, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_approved), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] approve(String _approved, BigInteger _tokenId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_approved), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprove(String _approved, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_approved), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger balanceOf(String _owner) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getApproved(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getName() throws ContractException {
        final Function function = new Function(FUNC_GETNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getSymbol() throws ContractException {
        final Function function = new Function(FUNC_GETSYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isApprovedForAll(String _owner, String _operator) throws ContractException {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger limit() throws ContractException {
        final Function function = new Function(FUNC_LIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt mint(String to, String tokenURI) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mint(String to, String tokenURI, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMint(String to, String tokenURI) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getMintInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getMintOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String ownerOf(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt safeTransferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String _from, String _to, BigInteger _tokenId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSafeTransferFromAddressAddressUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt safeTransferFrom(String _from, String _to, BigInteger _tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String _from, String _to, BigInteger _tokenId, byte[] _data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String _from, String _to, BigInteger _tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getSafeTransferFromAddressAddressUint256BytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public TransactionReceipt setApprovalForAll(String _operator, Boolean _approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_operator), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApprovalForAll(String _operator, Boolean _approved, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_operator), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_approved)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApprovalForAll(String _operator, Boolean _approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_operator), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_approved)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public Boolean supportsInterface(byte[] _interfaceID) throws ContractException {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(_interfaceID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String tokenUrl(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_TOKENURL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt transferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferFrom(String _from, String _to, BigInteger _tokenId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_from), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_to), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public static LimitToken load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new LimitToken(contractAddress, client, credential);
    }

    public static LimitToken deploy(Client client, CryptoKeyPair credential, String nftName, String nftSymbol, BigInteger max) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(nftName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(nftSymbol), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(max)));
        return deploy(LimitToken.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class ApprovalEventResponse {
        public TransactionReceipt.Logs log;

        public String _owner;

        public String _approved;

        public BigInteger _tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public TransactionReceipt.Logs log;

        public String _owner;

        public String _operator;

        public Boolean _approved;
    }

    public static class TransferEventResponse {
        public TransactionReceipt.Logs log;

        public String _from;

        public String _to;

        public BigInteger _tokenId;
    }
}
